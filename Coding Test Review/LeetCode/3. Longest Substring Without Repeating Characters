📌 **Problem Name**
3. Longest Substring Without Repeating Characters

🗂 **Category / Type**
Sliding Window / HashSet / Two Pointers

❌ **What Went Wrong / Why It Failed**
Initially tried to brute-force all substrings, which resulted in time limit exceeded. Didn’t consider how sliding window + set can help reduce time complexity from O(n²) to O(n).

🧠 **Key Takeaways / What I Learned**
* The sliding window technique is powerful when tracking continuous segments with constraints.
* Use a `Set` to efficiently track seen characters and detect duplicates in O(1).
* Move the `left` pointer only as much as needed — don’t reset it completely.

***[01 May 2025 Review]***
When you see a duplicate at right, shrink the window from left—removing one char at a time—until the duplicate is expelled.

***[13 May 2025 Review]***
I changed the original implementation from using a concrete class type to using an interface type.
Using an interface improves flexibility and follows one of Java's object-oriented principles — the Dependency Inversion Principle (DIP).

Refactored the code to move check.add(s.charAt(right)) inside the else block to avoid redundant additions.
Even after removing duplicates, the current character must still be included in the window

🐱 **Point**
1. Use `Set<Character>` to track characters in the current window.
2. Move `left` pointer forward only when a duplicate is found.
3. Always update `maxLength` with `right - left + 1` whenever the window is valid.
4. Efficient and clean logic makes this approach suitable even for large inputs.
