📌 Problem Name
-125. Valid Palindrome

🗂 Category / Type
-Two Pointers / String Manipulation

🔍 My Initial Approach
-Used two pointers to compare characters from both ends of the string

-Initially handled all logic using only if statements without else if, which caused conditions to overlap and logic to break

-Didn't properly skip non-alphanumeric characters before comparison, which led to incorrect results

❌ What Went Wrong / Why It Failed
-All conditions were handled with if blocks, so the control flow wasn’t clear and failed in certain edge cases

-I was checking and comparing characters even when they weren’t valid (i.e., not letters or digits)

-This resulted in errors when comparing invalid characters, even though they should’ve been skipped

✅ Final Solution Summary
-Used two pointers, one from the start and one from the end of the string

-Skipped non-alphanumeric characters using <<<<Character.isLetterOrDigit>>>>>
-Compared characters after converting them to lowercase       

🧠 Key Takeaways / What I Learned
-It's important to return early (return false) when the failure condition is clear — this improves both readability and efficiency
-Character.toLowerCase(s.charAt(first)) 
-Character.isLetterOrDigit(s.charAt(end))

**[2025-04-22 Review]**  
- Encountered a compilation error due to using `Char` instead of `Character`.  
- Incorrectly used `s.char(first)` instead of `s.charAt(first)`, resulting in a method not found error.


**[2025-04-26 Review]**
-Incorrectly used code instead of int last = s.length() - 1, causing a "method not found" error.
-Forgot to use Character.isLetterOrDigit.

💬 Additional Thoughts / Retrospective
- In the future, I’d like to improve the efficiency by returning false as soon as a mismatch is found, instead of continuing unnecessary checks
