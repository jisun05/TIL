📌 Problem Name
- 167. Two Sum II - Input Array Is Sorted(https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/)

🗂 Category / Type
- Two Pointers

🔍 My Initial Approach
- Moving the pointers based solely on whether `numbers[left]` is less than or greater than `numbers[right]`
- I was focusing on comparing individual values instead of their sum

❌ What Went Wrong / Why It Failed
- Mistakenly moved pointers based on value comparison instead of comparing the sum to the target
- This led to incorrect pointer movement and missed the correct answer

✅ Final Solution Summary
- Used two pointers starting from both ends of the array
- Compared the sum of `numbers[left] + numbers[right]` to the target:
  - If sum == target → return the indices
  - If sum < target → move left pointer
  - If sum > target → move right pointer
- Took advantage of the array being sorted to efficiently find the pair in O(n) time

🧠 Key Takeaways / What I Learned
- Always base pointer movement on the actual goal of the problem — in this case, the "sum", not the individual values
- Recognized that the sorted nature of the array allows for a two-pointer strategy

**[2025-04-26 Review]**
-Instead of creating a result array beforehand and modifying it inside the loop, it's cleaner and more efficient to directly create and return a new array when the solution is found.
This approach improves code readability, reduces unnecessary variable declarations, and better aligns with modern clean coding practices.

-I learned that returning new int[]{-1, -1} is much better because it clearly indicates failure in a way that is easy to understand. 
It avoids confusion compared to returning an empty array, and it makes the code more readable and easier to debug.

**[2025-05-01 Review]**
✅ Time Complexity: O(n)
first only moves to the right (first++)
last only moves to the left (last--)
Since both pointers move toward each other and each advances at most once per step, there are at most n steps.
So, when the array length is n, the algorithm performs at most n operations to find the answer.

✅ Space Complexity: O(1)
Only two pointers (first, last) are used, along with a result array of size 2.
Since no additional space grows with input size, the space complexity is constant.


**[2025-05-02 Review]**
why the condition 'while (first < last)' ?
=> It is used because we are using the two-pointer approach on a sorted array.
The loop continues as long as two pointers haven't crossed each other. Once first is no longer less thann last, all posiible pairs have been checked,
and there's no need to continue.






💬 Additional Thoughts / Retrospective
- From my perspective, using a nested for loop seemed more readable when the input array size is relatively small.
